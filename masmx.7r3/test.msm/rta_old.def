r       $equ    0
k       $equ    1
x       $equ    2
y       $equ    3
a       $equ    4
b       $equ    5
sp      $equ    14
dp      $equ    15

w0      $equ    0
t1      $equ    1
t2      $equ    2
t3      $equ    3
i       $equ    4
xi      $equ    5
bx      $equ    5

h1      $equ    t1
h2      $equ    t2

i$      $form   5, 3, 1, 15
i$x     $form   5, 3, 1, 3, 12

p       $proc
sr      $name   0
sk      $name   1
sx      $name   2
sy      $name   3
sa      $name   4
sb      $name   5
z       $name   6
t       $name   7
lr      $name   8
lk      $name   9
lx      $name   10
ly      $name   11
la      $name   12
lb      $name   13
inc     $name   14
dec     $name   15
or      $name   16
orB     $name   17
and     $name   18
andB    $name   19
xor     $name   20
ta      $name   21
ax      $name   22
ay      $name   23
aa      $name   24
ab      $name   25
ana     $name   26
anb     $name   27
m       $name   28
mf      $name   29
d       $name   30
push    $name   31

        $if     p(1, 2)
        i$x     $n, p(0, 2)++p(1, 3), 1, p(1, 2), p(1, 1)
        $else
        $if     $net(p(1,1))>32768
        $flag Address Out of Range
        $endif
        i$      $n, p(0, 2)++p(1, 3), p(1, *1), p(1, 1)
        $endif
        $end

p       $proc
ina     $name   0
inb     $name   1
outa    $name   2
outb    $name   3
plva    $name   4

sabr    $name   6
sbbr    $name   7
fsabr   $name   14
fsbbr   $name   15

        $if     p(1, 2)
        i$x     $n, i, 1, p(1, 2), p(1, 1)
        $else
        i$      $n, i, p(1, *1), p(1, 1)
        $endif
        $end


see$1   $equ    1*/14
see$2   $equ    1*/13
see$3   $equ    1*/12
see$4   $equ    1*/11
see$5   $equ    1*/10
see$6   $equ    1*/9
see$7   $equ    1*/8
half$w  $equ    1*/7


carry$  $equ    1*/4
sign$   $equ    1*/3
zero$   $equ    1*/2
parity$ $equ    1*/1
odd$    $equ    1

p       $proc
on      $name   0
off     $name   1
bax     $name   2

ii      $name   4
iret	$name	5
ir      $name   5
lret    $name   6
fret    $name   7

        $if     p(1, 2)
        i$x     $n, xi, 1, p(1, 2), p(1, 1)
        $else
        i$      $n, xi, p(1, *1), p(1, 1)
        $endif
        $end

i$2a    $form   5, 3, 1, 1, 6, 8 

p       $proc
l       $name   14
_ax     $name   15

        $if     (p(0, 2)=xi)++(p(1, 3)=xi)
        i$2a    $n, xi, 0, 1, p(1, 1), p(1, 2)
        $else
        i$2a    $n, xi, 0, 0, p(1, 1), p(1, 2)
        $endif
        $end

p       $proc
sar     $name   0
sbr     $name   1
dsr     $name   2
lcal    $name   3
sal     $name   4
sbl     $name   5
dsl     $name   6

rar     $name   8
rbr     $name   9
drr     $name   10

ral     $name   12
rbl     $name   13
drl     $name   14
j       $name   15
saa     $name   16
sba     $name   17
dsa     $name   18

jdr     $name   20
jdk     $name   21
jnc     $name   22
jc      $name   23
jp      $name   24
jm      $name   25
jnz     $name   26
jz      $name   27
jpe     $name   28
jpo     $name   29
je      $name   30
jo      $name   31

        $if     p(1, 2)
        i$x     $n, 6, 1, p(1, 2), p(1, 1)
        $else
        i$      $n, 6, p(1, *1), p(1, 1)
        $endif
        $end


p       $proc
ts      $name   0	. test and set
n       $name   1	. negate (1s complement)
sim	$name	2	. switch interrupt mask
labt    $name   3	. load absolute base table
srs     $name   4	. store register set
lrs     $name   5	. load register set
go      $name   6
call    $name   7
qs      $name   8	. quad store
ql      $name   9	. quad load
flp     $name   10	. floating load and pack
dpx     $name   11	. double push and unpack
fa      $name   12	. floating add
fan     $name   13	. floating add negative
fm      $name   14	. floating multiply
fd      $name   15	. floating divide




dlsc    $name   20	. double load shift and count
mta     $name   21	. masked test subtract accumulator
sc      $name   22	. store carry
lc      $name   23	. load carry
ds      $name   24	. double store
dl      $name   25	. double load
da      $name   26	. double add
dan     $name   27	. double add negative
lsc     $name   28	. load shift and count
dtab    $name   29	. double test subtract accumulators
src     $name   30	. shift right through carry
slc     $name   31	. shift left through carry

        $if     p(1, 2)
        i$x     $n, 7, 1, p(1, 2), p(1, 1)
        $else
        i$      $n, 7, p(1, *1), p(1, 1)
        $endif
        $end

        
        $set_option "a"
