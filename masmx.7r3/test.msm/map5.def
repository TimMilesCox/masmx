	$word	32
	$byte	 8
	$quantum 8
	$awidth	32

p	$proc
"$map"*	$name

p	$proc
word*	$name
parts	$set	p(1,1:)
"$data"	$set,$binary	p(1,1:parts)
part	$do	parts-1,	relocate	p(1, 1:part)
	$load,$bits	$data
	$end

p	$proc
relocate* $name
label1	$pushrel	p(1,1)

	$if	$t(label1)=$equf
v	$set	label1
bits	$set	from2(label1)
scale	$set	from3(label1)
offset	$set	from4(label1)
descant	$set	from5(label1)

limit	$set	1*/bits
mask	$set	limit-1
unmask	$set	^(mask*/scale)
field	$set	v+(($data/*scale)**mask)
field_v $set	1
limit_v	$set	0
	$if	descant<0
field	$set	(v+offset)/*(-descant)
        $if     (bits=24)**(($data**2)=0)	. (offset<0)
	$if	offset<0
field   $set    $net(v-($+$b))/*(-descant))
field_v $set    $net(v-($+$b))
limit_v $set    -(limit*/(-descant))
	$else
field	$set	(v+offset)-($+$b)
field_v $set	field
limit_v $set	-(limit*/(-descant))
field	$set	field/*(-descant)
	$endif
	$endif
	$if	(field<limit)++((field_v<0)**(field_v>limit_v))
	$else
	$flag	target field overflowed
	$trace	field
	$trace	mask
	$trace	field_v
	$trace	limit_v
	$endif
	$endif

field	$set	field**mask

"$data"* $set	(field*/scale)++($data**unmask)
	$else
	$do	$o('d'),	;
	$trace	label1
	$endif

	$end

f	$func
from2*	$name
	$return	f(1, 2)
from3*	$name
	$return	f(1, 3)
from4*	$name
	$return	f(1, 4)
from5*	$name
	$return	f(1, 5)
	$end

index	$do	p(),	word	p(index, 1)
	$end

