;*******************************************************************************
;
; File     : TIME.ASM
;
; Author   : Stephen Macdonald
;
; Project  : Desktop range of ticket printers
;
; Contents : This file contains the date/time handling routines
;
; System   : 80C537
;
; History  :
;   Date     Who Ver  Comments
;
; Notes    :
;
;*******************************************************************************

olddatebuffer:  VAR 2
oldtimebuffer:  VAR 2
t1buffer:       VAR     2
t2buffer:       VAR     2

;******************************************************************************
;
; Function:     TIM_FormatDate
; Input:        DPTR1 = where to store date string in XRAM
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:
;   Generates the ASCII representation of the default date to the specified
;   8 character buffer.
;
;******************************************************************************

TIM_FormatDate:
	MOV     DPSEL,#0
	MOV     DPTR,#datebuffer
	CALL    TIM_FormatDateCustom
	RET

;******************************************************************************
;
; Function:     TIM_FormatDateCustom
; Input:        DPTR1 = where to store date string in XRAM
;               DPTR0 = address of date/time stamp.
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:
;   Generates the ASCII representation of the specified date to the specified
;   8 character buffer.
;
;******************************************************************************

TIM_FormatDay: ; DPTR0=datestamp, DPTR1=buffer
	MOV     DPSEL,#0                ; get the days
	MOVX    A,@DPTR                 ;
	RR      A                       ;
	RR      A                       ;
	RR      A                       ;
	ANL     A,#01Fh                 ;
	MOV     B,A                     ;
	MOV     R5,#2+NUM_ZEROPAD       ;
	CALL    NUM_NewFormatDecimalB   ; output 2 digit days
	INC     DPTR
	INC     DPTR
	RET

TIM_FormatMonth: ; DPTR0=datestamp, DPTR1=buffer
	MOV     DPSEL,#0                ; get the months
	PUSHDPH                         ;
	PUSHDPL                         ;
	MOVX    A,@DPTR                 ;
	ANL     A,#7                    ;
	RL      A                       ;
	MOV     B,A                     ;
	INC     DPTR                    ;
	MOVX    A,@DPTR                 ;
	POP     DPL                     ;
	POP     DPH                     ;
	RL      A                       ;
	ANL     A,#1                    ;
	ORL     A,B                     ;
	MOV     B,A                     ;
	MOV     R5,#2+NUM_ZEROPAD       ;
	CALL    NUM_NewFormatDecimalB   ; output 2 digit months
	INC     DPTR                    ;
	INC     DPTR                    ;
	RET

TIM_FormatYear: ; DPTR0=datestamp, DPTR1=buffer
	MOV     DPSEL,#0                ; get the year
	PUSHDPH
	PUSHDPL
	INC     DPTR
	MOVX    A,@DPTR                 ;
	POP     DPL
	POP     DPH
	ANL     A,#07Fh                 ;
	MOV     B,A                     ;
	MOV     R5,#2+NUM_ZEROPAD       ;
	CALL    NUM_NewFormatDecimalB   ; output 2 digit years
	RET

TIM_FormatDateCustom:
	PUSHDPH
	PUSHDPL
	MOV     DPTR,#man_dateformat
	MOVX    A,@DPTR
	POP     DPL
	POP     DPH
	JNZ     TIM_FDCuseusa
	CALL    TIM_FormatDay
	MOV     A,#'/'                  ; output a "/"
	MOVX    @DPTR,A                 ;
	INC     DPTR                    ;
	CALL    TIM_FormatMonth
	JMP     TIM_FDCdate
TIM_FDCuseusa:
	CALL    TIM_FormatMonth
	MOV     A,#'/'                  ; output a "/"
	MOVX    @DPTR,A                 ;
	INC     DPTR                    ;
	CALL    TIM_FormatDay
TIM_FDCdate:
	MOV     A,#'/'                  ; output a "/"
	MOVX    @DPTR,A                 ;
	INC     DPTR                    ;
	CALL    TIM_FormatYear
	RET

;******************************************************************************
;
; Function:     TIM_FormatTime
; Input:        DPTR1 = where to store time string in XRAM
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:
;   Generates the ASCII representation of the default time to the specified
;   5 character buffer.
;
;******************************************************************************

TIM_FormatTime:
	MOV     A,R3
	PUSHACC
	MOV     A,R4
	PUSHACC
;;;;;   PUSHR3
;;;;;   PUSHR4
	MOV     R3,#0
	MOV     R4,#0
	MOV     DPSEL,#0
	MOV     DPTR,#datebuffer+2
	CALL    TIM_FormatTimeCustom
	POP     ACC
	MOV     R4,A
	POP     ACC
	MOV     R3,A
;;;;;   POP     4
;;;;;   POP     3
	RET

TIM_FormatAdjustedTime:
	MOV     DPSEL,#0
	MOV     DPTR,#datebuffer+2
	CALL    TIM_FormatTimeCustom
	RET

;******************************************************************************
;
; Function:     TIM_FormatTimeCustom
; Input:        DPTR1 = where to store time string in XRAM
;               DPTR0 = address of date/time stamp.
;               R3 = hours to add
;               R4 = minutes to add
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:
;   Generates the ASCII representation of the specified time to the specified
;   5 character buffer.
;
;******************************************************************************

TIM_FormatTimeCustom:
	MOV     A,R5
	PUSHACC
	MOV     A,R6
	PUSHACC
;;;;;   PUSHR5
;;;;;   PUSHR6

	MOV     DPSEL,#0                ; get the hours
	MOVX    A,@DPTR                 ;
	ANL     A,#7                    ;
	INC     DPTR                    ;
	RL      A                       ;
	RL      A                       ;
	MOV     B,A                     ;
	MOVX    A,@DPTR                 ;
	ANL     A,#0C0h                 ;
	RL      A                       ;
	RL      A                       ;
	ORL     A,B                     ;
	MOV     R5,A                    ; store hours for later

	MOVX    A,@DPTR                 ; get the minutes
	ANL     A,#63                   ;

	ADD     A, R4                   ; add extra minutes
	CJNE    A, #60, TIM1            ; check for carry
TIM1:   JC      TIM_FTCok               ;
	INC     R5                      ; add an hour
	SUBB    A, #60                  ; correct minutes

TIM_FTCok:
	PUSHACC                         ; save minutes

	MOV     A, R5                   ;
	ADD     A, R3                   ; add extra hours
	CJNE    A, #24, TIM2            ; check for carry
TIM2:   JC      TIM_FTCok2              ;
	SUBB    A, #24                  ; correct hour

TIM_FTCok2:
	MOV     B,A                     ;
	MOV     R5,#2+NUM_ZEROPAD       ;
	MOV     DPSEL,#1                ;
	CALL    NUM_NewFormatDecimalB   ; output 2 digit hours

	INC     DPTR                    ;
	INC     DPTR                    ;
	MOV     A,#':'                  ; output a ":"
	MOVX    @DPTR,A                 ;
	INC     DPTR                    ;

	POP     ACC
	MOV     B, A
	MOV     R5,#2+NUM_ZEROPAD       ;
	MOV     DPSEL,#1                ;
	CALL    NUM_NewFormatDecimalB   ; output 2 digit minutes

	POP     ACC
	MOV     R6,A
	POP     ACC
	MOV     R5,A
;;;;;   POP     6
;;;;;   POP     5
	RET


;******************************************************************************
;
; Function:     TIM_DisplayDate
; Input:        ?
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:
;   etc
;
;******************************************************************************

msg_curdate: DB 255,21,0,0,0,0,21,'Current Date DD/MM/YY'
TIM_DisplayDate:
	MOV     DPTR,#msg_curdate
	CALL    MEM_SetSource
	MOV     DPTR,#buffer
	CALL    MEM_SetDest
	MOV     R7,#FIELD_HEADER+21
	CALL    MEM_CopyCODEtoXRAM
	CALL    TIM_GetDateTime
	MOV     DPSEL,#1
	MOV     DPTR,#buffer+FIELD_HEADER+13
	CALL    TIM_FormatDate
	IF DT5
	 CALL   PRT_StartPrint
	 CALL   DisplayOneLiner
	 CALL   PRT_EndPrint
	ELSE
	 CALL   LCD_Clear
	 MOV    DPTR,#buffer+7
	 MOV    R7,#21
	 CALL   LCD_DisplayStringXRAM
	ENDIF
	RET

;******************************************************************************
;
; Function:     TIM_DisplayTime
; Input:        ?
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:
;   etc
;
;******************************************************************************

msg_curtime: DB 255,18,0,0,0,0,18,'Current Time HH:MM'
TIM_DisplayTime:
	MOV     DPTR,#msg_curtime
	CALL    MEM_SetSource
	MOV     DPTR,#buffer
	CALL    MEM_SetDest
	MOV     R7,#FIELD_HEADER+18
	CALL    MEM_CopyCODEtoXRAM
	CALL    TIM_GetDateTime
	MOV     DPSEL,#1
	MOV     DPTR,#buffer+FIELD_HEADER+13
	CALL    TIM_FormatTime
	IF DT5
	 CALL   PRT_StartPrint
	 CALL   DisplayOneLiner
	 CALL   PRT_EndPrint
	ELSE
	 CALL   LCD_Clear
	 MOV    DPTR,#buffer+7
	 MOV    R7,#18
	 CALL   LCD_DisplayStringXRAM
	ENDIF
	RET

;******************************************************************************
;
; Function:     TIM_ChangeDate
; Input:        ?
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:
;   etc
;
;******************************************************************************

msg_getdate:    DB 255,20,0,0,0,0,20,'Enter date as ddmmyy'
msg_getdateusa: DB 255,20,0,0,0,0,20,'Enter date as mmddyy'

msg_newdate: DB 10,'New Date: '

TIM_ChangeDate:
	MOV     A,#SYS_AREA_SETDATE
	CALL    SYS_SetAreaCode
	CALL    TIM_DisplayDate
	MOV     DPTR,#datebuffer
	CALL    MTH_LoadOp1Long
	MOV     DPTR,#olddatebuffer
	CALL    MTH_StoreLong

	IF DT5

	 CALL   PRT_StartPrint

	 MOV    DPTR,#man_dateformat
	 MOVX   A,@DPTR
	 JNZ    TIM_CDusamessage
	 MOV    DPTR,#msg_getdate
	 JMP    TIM_CDprintmessage
TIM_CDusamessage:
	 MOV    DPTR, #msg_getdateusa
TIM_CDprintmessage:
	 CALL   PRT_DisplayMessageCODE
	 CALL   PRT_MessageFeed
	 CALL   PRT_EndPrint

	ELSE

	 MOV    A,#64
	 CALL   LCD_GotoXY
	 MOV    DPTR,#msg_newdate
	 CALL   LCD_DisplayStringCODE

	ENDIF

	MOV     B,#74
	MOV     R7,#6
	CALL    NUM_GetNumber
	JZ      TIM_CDabort
	MOV     DPTR,#buffer
	CALL    MTH_StoreLong
	MOV     DPTR,#buffer
	CALL    TIM_SetDate
	CALL    TIM_GetDateTime
	MOV     DPSEL,#0
	
	IF      PAPER
	MOV     DPTR,#aud_entry_changedate
	CALL    AUD_AddEntry
	ENDIF

TIM_CDabort:
	IF DT5
	 CALL   TIM_DisplayDate
	 CALL   PRT_StartPrint
	 CALL   PRT_FormFeed
	 CALL   PRT_EndPrint
	ELSE
	 CALL   LCD_Clear
	 SETB   tim_timerupdate
	ENDIF
	
	clr     A
	
	RET

;******************************************************************************
;
; Function:     TIM_ChangeTime
; Input:        ?
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:
;   etc
;
;******************************************************************************

msg_gettime: DB 255,18,0,0,0,0,18,'Enter time as hhmm'
msg_newtime: DB 10,'New Time: '
TIM_ChangeTime:
	MOV     A,#SYS_AREA_SETTIME
	CALL    SYS_SetAreaCode
	CALL    TIM_DisplayTime
	MOV     DPTR,#datebuffer
	CALL    MTH_LoadOp1Long
	MOV     DPTR,#olddatebuffer
	CALL    MTH_StoreLong
	IF DT5
	 CALL   PRT_StartPrint
	 MOV    DPTR,#msg_gettime
	 CALL   PRT_DisplayMessageCODE
	 CALL   PRT_MessageFeed
	 CALL   PRT_EndPrint
	ELSE
	 MOV    A,#64
	 CALL   LCD_GotoXY
	 MOV    DPTR,#msg_newtime
	 CALL   LCD_DisplayStringCODE
	ENDIF
	MOV     B,#74
	MOV     R7,#4
	
TIM_WAS_HERE EQU 1
	
	IF      TIM_WAS_HERE
	
	 call    TIM_StopCounting
	
	 mov     b,#74                   ; i.e 2nd Row + Some Columns
	 call    NUM_GetString           ; Leave ASCII HHMM in Decimal
	 mov     dptr,#num_inputbuffer+2 ; RTC wants HH/MM in 4-bit BCD
	 call    NUM_Pack2               ; BCD MM is in B
	 mov     r1,#RTC_SLAVE
	 mov     dptr,#3
	 call    I2C_Write8

	 mov     dptr,#num_inputbuffer   ; Change ASCII Hours to 4-bit BCD
	 call    NUM_Pack2               ; BCD HH is in B
	 mov     r1,#RTC_SLAVE
	 mov     dptr,#4
	 call    I2C_Write8
	
	 mov    b,#0
	 mov    r1,#RTC_SLAVE
	 mov    dptr,#2
	 call   I2C_Write8              ; Reset Seconds
	 
	 call    TIM_StartCounting
	
	ELSE
	
	 CALL    NUM_GetNumber
	 JZ      TIM_CTabort
	 MOV     DPTR,#buffer
	 CALL    MTH_StoreLong
	 MOV     DPTR,#buffer
	 CALL    TIM_SetTime
	
	ENDIF
	
	CALL    TIM_GetDateTime
	MOV     DPSEL,#0
	
	IF      PAPER
	MOV     DPTR,#aud_entry_changetime
	CALL    AUD_AddEntry
	ENDIF

TIM_CTabort:

	IF      THEATRE
	call    THEATRE_IfGrandEntrance
	jnz     TIM_MostUnTheatrical
	call    THEATRE_DayStart
TIM_MostUnTheatrical:
	ENDIF

	IF DT5
	 CALL   TIM_DisplayTime
	 CALL   PRT_StartPrint
	 CALL   PRT_FormFeed
	 CALL   PRT_EndPrint
	ELSE
	 CALL   LCD_Clear
	 SETB   tim_timerupdate
	ENDIF
	
	clr     A
	
	RET
;******************************************************************************
;
; Function:     TIM_ChangeCloseTime
; Input:        ?
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:  This sets the attraction closing time. It assumes closing will
;               occur on the current day (no after-midnight rollover).
;
; Uses:         msg_gettime, SYS_AREA_SETCLOSETIME, aud_entry_changeclosetime
; Calls:        SYS_SetAreaCode, TIM_DisplayTime, MTH_LoadOp1Long, MTH_StoreLong
;               LCD_GotoXY, LCD_DisplayStringCODE, NUM_GetNumber, TIM_SetTime
;               TIM_GetDateTime, AUD_AddEntry, LCD_Clear
;               
;
;******************************************************************************

msg_newclose: DB 11,'New Close: '
TIM_ChangeCloseTime:
	MOV     A,#SYS_AREA_SETCLOSETIME
	CALL    SYS_SetAreaCode
	CALL    TIM_DisplayTime
	MOV     DPTR,#datebuffer
	CALL    MTH_LoadOp1Long
	MOV     DPTR,#olddatebuffer
	CALL    MTH_StoreLong
;
	MOV     A,#64
	CALL    LCD_GotoXY
	MOV     DPTR,#msg_newclose
	CALL    LCD_DisplayStringCODE
;
	MOV     B,#74
	MOV     R7,#4
	CALL    NUM_GetNumber
	JZ      TIM_CCTabort
	MOV     DPTR,#buffer
	CALL    MTH_StoreLong
	MOV     DPTR,#buffer
	CALL    TIM_SetTime
	CALL    TIM_GetDateTime
	MOV     DPSEL,#0
	
	IF      PAPER
	MOV     DPTR,#aud_entry_changeclosetime
	CALL    AUD_AddEntry
	ENDIF

;
TIM_CCTabort:
	CALL    LCD_Clear
	SETB    tim_timerupdate
	RET
;******************************************************************************


tim_batlowmsg:  DB 8,'LOWPOWER'
tim_bits:       DB 5,'p/  m'
;******************************************************************************
;
; Function:     TIM_ForceDisplayDateTime
; Input:        ?
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:
;   etc
;
;******************************************************************************
TIM_ForceDisplayDateTime:
	SETB    tim_timerupdate
	SETB    tim_timerenabled
	JMP     TIM_DisplayDateTime
	; fall thru to next routine

;******************************************************************************
;
; Function:     TIM_DisplayDateTime
; Input:        ?
; Output:       ?
; Preserved:    ?
; Destroyed:    ?
; Description:
;   etc
;
;******************************************************************************
TIM_DDTokext:
	JMP     TIM_DDTok

TIM_DisplayDateTime:
	IF DT5
	ELSE
	 JNB    tim_timerupdate,TIM_DDTokext
	 JNB    tim_timerenabled,TIM_DDTokext
	 CALL   TIM_GetDateTime

	IF      TPPTALLY=0
	 MOV    DPSEL,#1
	 MOV    DPTR,#buffer
	 CALL   TIM_FormatDate
	ENDIF

	 MOV    DPSEL,#1
	 MOV    DPTR,#buffer+8
	 CALL   TIM_FormatTime
	 MOV    A,#0
	 CALL   LCD_GotoXY
	 MOV    R7,#8
	 MOV    DPTR,#buffer
	 CALL   LCD_DisplayStringXRAM

	 MOV    A,#19
	 CALL   LCD_GotoXY
	 MOV    R7,#5
	 CALL   LCD_DisplayStringXRAM
	 CLR    tim_timerupdate

; SSM converted some of the body of this function into a function
; which can be called from HOST.ASM, otherwise no functionality
; has changed. We call the new function then skip over it to where
; we would have been originally

	 CALL   TIM_CalcVirtualQueueTime
	 ; system time is in timebuffer, offset is in R3:R4
	 JMP    TIM_Skip

TIM_CalcVirtualQueueTime:

	 CALL   CTRL_UpdateTime   ; 

	IF      THEATRE
	call    THEATRE_IfGrandEntrance         ; Shows price key?
	jnz     TIM_CVQTnotMuchTheatre
	mov     dptr,#theatre_shows             ; shows loaded?
	movx    a,@dptr
	jnz     TIM_CVQTTheatre
TIM_CVQTnotMuchTheatre:
	jmp     TIM_CVQTnotTheatre
TIM_CVQTTheatre
	mov     dptr,#theatre_realtime          ; read time of next show
	movx    a,@dptr
	mov     b,a
	inc     dptr
	movx    a,@dptr
	qanbx   ctrl_queuetimelength            ; subtract qtimeL
	qanbx   theatre_window                  ; subtract doorshut time
						; and that's VQT!
						; now subtract ordinal mins
						; realtime
	push    acc                             ; save upper VQT        SP+1
	push    b                               ;      lower VQT        SP+2
	mov     dptr,#timebuffer
	movx    a,@dptr                         ; read actual xxxx xHHH
	anl     a,#7                            ; isolate bb2..0
	push    acc                             ; save                  SP+3
	swap    a                               ; 0hhh 0000
	mov     b,a                             ;
	inc     dptr                            ; read hhMM MMMM
	movx    a,@dptr
	push    acc                             ;                       SP+4
	swap    a                               ;
	anl     a,#0Ch                          ; 0000 hh00
	orl     a,b                             ; 0hhh hh00
	cpl     a
	setB    c
	pop     b                               ; hhMM MMMM             SP+3
	addc     a,b                            ; ie subtract
	cpl     a                               ; turn into subtract word
	mov     b,a
	pop     acc                             ; 0000 0hhh             SP+2
	mov     r0,sp                           ; ->lower minutes VQT on stack
	addc    a,#255                          ; subtract extended
	cpl     a                               ; turn into upper subtract wd
	push    acc                             ; save                  SP+3
	mov     a,b                             ; lower subtract word
	setB    C                               ;
	addc     a,@r0                          ; subtract from lower minutes
	mov     b,a                             ; of VQT                SP+2
	pop     acc                             ; get upper minutes subtrahend
	dec     r0                              ; upper minutes VQT
	addc    a,@r0                           ; subtract
	dec     sp                              ;                       SP+1
	dec     sp                              ;                       SP+0
	jnb     acc.7,TIM_CVQTnoUflow           ; if all that subtracting
	push    acc                             ; pulled us back
	mov     a,#160                          ; thru midnight,
	add     a,b                             ; Just add 24*60 minutes
	mov     b,a                             ; (=1440=05A0)
	pop     acc
	addc    a,#5
TIM_CVQTnoUflow:                                

	rl      a                               ; now separate to
	rl      a                               ; 000H HHHH 00MM MMMM
	mov     r3,a                            ;     in R3    and R4 
	mov     a,b                             ; pull back hhMM MMMM
	anl     a,#63                           ; isolate minutes
	mov     r4,a                            ; into destination
	mov     a,b                             ; retrieve  hhMM MMMM
	rl      a
	rl      a
	anl     a,#3                            ;           0000 00HH
	orl     a,r3                            ;           000H HHHH 
	mov     r3,a                            ; ->  destination
	rl      a
	rl      a                               ;     0HHH HH00   add 4*hours
	add     a,r4                            ;    +00MM MMMM   to minutes
	mov     r4,a                            ;     _________
TIM_CVQT_Dminute:                               ; carry any whole hours
	add     a,#-60                          
	jnc     TIM_CVQT_WithinMinutes
	mov     r4,a
	inc     r3
	jmp     TIM_CVQT_Dminute
TIM_CVQT_WithinMinutes:

	ret

TIM_CVQTnotTheatre:
	ENDIF

	 MOV    DPTR,#ctrl_periodahead
	 CALL   MTH_LoadOp1Word
TIM_DDTcarryon1:
	 MOV    DPTR,#ctrl_periodlength
	 CALL   MTH_LoadOp2Word

	IF MINUTES_AHEAD=0
	 CALL   MTH_Multiply32by16       
	ENDIF

	 MOV    R0,#mth_operand2
	 CALL   MTH_ClearOperand
	 MOV    mth_op2ll,#60
	 CALL   MTH_Divide32by16
	 MOV    R3,mth_op1ll

	MOV     A,mth_op2ll
	PUSHACC

	MOV     DPTR,#timebuffer        ;
	MOVX    A,@DPTR                 ; get the current hours
	ANL     A,#07h                  ;
	RL      A                       ;
	RL      A                       ;
	MOV     B,A                     ;
	INC     DPTR                    ;
	MOVX    A,@DPTR                 ;
	RL      A                       ;
	RL      A                       ;
	ANL     A,#03h                  ;
	ORL     A,B                     ;
	MOV     B,#60
	MUL     AB

	MOV     R0,#mth_operand1
	CALL    MTH_ClearOperand
	MOV     mth_op1ll,A
	MOV     mth_op1lh,B

	MOV     R0,#mth_operand2
	CALL    MTH_ClearOperand
	MOV     DPTR,#timebuffer+1
	MOVX    A,@DPTR
	ANL     A,#03Fh
	MOV     mth_op2ll,A
	CALL    MTH_AddWords

	MOV     DPTR,#ctrl_periodlength
	CALL    MTH_LoadOp2Word
	CALL    MTH_Divide32by16
	MOV     R0,#mth_operand1
	CALL    MTH_ClearOperand
	POP     mth_op1ll

	CALL    MTH_CompareWords
	JNZ     TIM_DDTcarryon
	CALL    MTH_TestGTWord
	JC      TIM_DDTcarryon
	DEC     R3
	MOV     A,mth_op1ll
	ADD     A,#60
	MOV     mth_op1ll,A

TIM_DDTcarryon:
	CALL    MTH_SubWords
	MOV     R4,mth_op1ll
	RET
TIM_Skip:

	MOV     DPSEL,#1
	MOV     DPTR,#buffer
	CALL    TIM_FormatAdjustedTime
	MOV     DPSEL,#1
	MOV     DPTR,#buffer
;
	 MOV    A,#(64 + 19)
	 CALL   LCD_GotoXY
	 MOV    R7,#5
	 MOV    DPTR,#buffer
	 CALL   LCD_DisplayStringXRAM
;
	CALL    ACT_ClosingTime         ; Re-evaluate the closing time flag

	IF      LDSP
	CALL    LDSP_ACTBlank           ; Switch displays off if ACT or TTP0 TRUE.
	ENDIF

	JNZ     TIM_DDTnoupdate         ; If ACT or TTP0, skip display updates.
;


	IF      LDSP
	CALL    LDSP_QADisplay          ; LED display no. 1 = Queue At time
	ENDIF

; no, qadisplay does this T,17xj99        CALL    LDSP_QUDisplay          ; LED display no. 2 = Queue Until time

TIM_DDTnoupdate:
	MOV     DPSEL,#1
	MOV     DPTR,#buffer
;
	 MOV    A,#13
	 CALL   LCD_GotoXY
	 MOV    DPTR,#tim_bits
	 CALL   LCD_DisplayStringCODE

	 MOV    DPSEL,#0
	 MOV    DPTR,#ctrl_periodlength
	 MOV    DPSEL,#1
	 MOV    DPTR,#buffer
	 MOV    R5,#2
	 CALL   NUM_NewFormatDecimal16
	 MOV    A,#15
	 CALL   LCD_GotoXY
	 MOV    R7,#2
	 MOV    DPTR,#buffer
	 CALL   LCD_DisplayStringXRAM

	IF      TPPTALLY
	 MOV    DPSEL,#0
	 MOV    DPTR,#ctrl_periodcount
	 MOV    DPSEL,#1
	 MOV    DPTR,#buffer
	 MOV    R5,#7
	 CALL   NUM_NewFormatDecimal16
	 mov    dptr,#buffer+7
	 mov    a,#'/'
	 movx   @dptr,a
	 MOV    A,#0
	 CALL   LCD_GotoXY
	 MOV    R7,#8
	 MOV    DPTR,#buffer
	 CALL   LCD_DisplayStringXRAM
	ENDIF
	     
	 MOV    DPSEL,#0
	 MOV    DPTR,#ctrl_ticketsperperiod
	 CALL   MTH_IncWord
	 MOV    DPSEL,#1
	 MOV    DPTR,#buffer
	 MOV    R5,#4
	 CALL   NUM_NewFormatDecimal16
	 MOV    DPTR,#ctrl_ticketsperperiod
	 CALL   MTH_DecWord
	 MOV    A,#9
	 CALL   LCD_GotoXY
	 MOV    R7,#4
	 MOV    DPTR,#buffer
	 CALL   LCD_DisplayStringXRAM


	 JNB     sys_batlowwarn,TIM_DDTok
	 MOV     A,#0
	 CALL    LCD_GotoXY
	 MOV     DPTR,#tim_batlowmsg
	 CALL    LCD_DisplayStringCODE
TIM_DDTok:
	ENDIF
	RET
;
;******************************************************************************
;
; Function:     TIM_AddTimes
; Input:        Time 1 in t1buffer, time 2 in t2buffer.
; Output:       Result in t2buffer
; Preserved:    A, B, DPTR
; Destroyed:    None
; Description:  Add two times together, and correct for midnight rollover. The
;               times are in 24 hour clock format hh:mm, in 2 bytes.
;
; Uses:         t1buffer, t2buffer
;
;******************************************************************************
;
TIM_AddTimes:
	PUSHACC
	PUSHB
	PUSHDPL
	PUSHDPH

	MOV     DPTR,#t1buffer
	MOVX    A,@DPTR                 ; Hours first
	MOV     B,A
	MOV     DPTR,#t2buffer
	MOVX    A,@DPTR
	ADD     A,B
	MOVX    @DPTR,A                 ; Hours result (may be > 23)

	add     a,#-24                  ; Tim 5x99
	jnc     TIM_HoursAreInRange     ; "
	movx    @dptr,a                 ; "
TIM_HoursAreInRange:                    ; " Xperimental

;
	MOV     DPTR,#t1buffer+1        ; Now minutes
	MOVX    A,@DPTR
	MOV     B,A
	MOV     DPTR,#t2buffer+1
	MOVX    A,@DPTR
	ADD     A,B                     ; Minutes result (may be > 60)
; Test for minutes > 59, and add an hour if so.
	CJNE    A,#60,TIM_ATnot60
	JMP     TIM_ATexact60
;
TIM_ATless60:
	MOV     DPTR,#t2buffer+1
	MOVX    @DPTR,A                 ; Minutes saved
	MOV     DPTR,#t2buffer
	MOVX    A,@DPTR                 ; Hours
	JMP     TIM_AThrsovchk
;
TIM_ATnot60:
	JC      TIM_ATless60            ; C set => A < 60
TIM_ATexact60:
; Minutes count >= 60. Subtract 60, and add an hour.
	CLR     C
	SUBB    A,#60
	MOV     DPTR,#t2buffer+1
	MOVX    @DPTR,A                 ; Save minutes.
	MOV     DPTR,#t2buffer
	MOVX    A,@DPTR                 ; Hours.
	ADD     A,#1                    ; Hours + 1
;
; Now check for hrs overflow (> 23)
TIM_AThrsovchk:
	CJNE    A,#24,TIM_ATnot24
	JMP     TIM_ATexact24
;
TIM_ATnot24:
	JC      TIM_ATless24            ; C set => A < 24
TIM_ATexact24:
; Hours count >= 24. Subtract 24.
	CLR     C
	SUBB    A,#24
;
TIM_ATless24:
	MOVX    @DPTR,A
	POP     DPH
	POP     DPL
	POP     B
	POP     ACC
	RET
;
;******************************************************************************
;
; Function:     TIM_UnpackTime
; Input:        DPTR -> current time buffer
; Output:       Result in t1buffer (hh:mm)
; Preserved:    None
; Destroyed:    None
; Description:  The current time is a packed 16bit value. This routine unpacks
;               it and puts it into t1buffer as two bytes, hh:mm
;
; Uses:         t1buffer
;
;******************************************************************************
;
TIM_UnpackTime:
	MOVX    A,@DPTR         ; Hours byte
	ANL     A,#00000111b    ; Only interested in bottom 3 bits
	RL      A
	RL      A               ; Make space for 2 bits from minutes byte.
	MOV     B,A             ; Save them for later
;
	INC     DPTR
	MOVX    A,@DPTR         ; Minutes byte
	ANL     A,#11000000b    ; Top 2 bits only
	RL      A
	RL      A               ; Top 2 bits are part of hrs count.
	ORL     A,B             ; Add in bottom 3 bits
	MOV     B,A
;
	MOVX    A,@DPTR
	ANL     A,#00111111b    ; Bottom 6 bits are minutes.
; A = minutes. B = Hours.
	XCH     A,B
	MOV     DPTR,#t1buffer
	MOVX    @DPTR,A         ; Hours saved
	INC     DPTR
	MOV     A,B
	MOVX    @DPTR,A         ; Minutes saved
	RET
;
;******************************************************************************
;
; Function:     TIM_24hr12hr
; Input:        time in buffer, ASCII HH:MM
; Output:       time in buffer, ASCII HH:MM
; Preserved:    DPTR
; Destroyed:    None
; Description:  buffer has a 24hr clock string e.g. "23:45". This routine recalculates
;               it to be a 12hr clock string, e.g "11:45", with a leading 0 blanked.
;
; Uses:         
;
;******************************************************************************
;
TIM_24hr12hr:
	PUSHDPL
	PUSHDPH
	MOV     DPTR,#buffer
	MOVX    A,@DPTR         ; Either "0", "1" or "2"
	CLR     C
	SUBB    A,#'0'          ; Now zero, 1 or 2
	SWAP    A
	ANL     A,#11110000b
	MOV     B,A
	INC     DPTR            ; Second character
	MOVX    A,@DPTR
	CLR     C
	SUBB    A,#'0'
	ANL     A,#00001111b
	ORL     A,B
; A is now BCD representation of hours (00 to 23)
	CALL    BCDtoBIN
; A is now binary. Hurrah!
	CJNE    A,#13,TIM_2412ampm      ; Check for after-noon
;
TIM_2412hrclock:
	CLR     C                       ; After 12, convert to p.m.
	SUBB    A,#12
	JMP     TIM_2412hourok
;
TIM_2412ampm:
	JNC     TIM_2412hrclock
;
TIM_2412hourok:                         ; Put the updated hrs chars back
	MOV     DPTR,#buffer
	CALL    BinToBCD
	CALL    BCDToASCII
;
; If 1st digit = "0", convert to space
	MOV     DPTR,#buffer
	MOVX    A,@DPTR
	CJNE    A,#'0',TIM_2412notzero  ; Skip if not zero, else...
	MOV     A,#' '                  ; Replace with <blank>
	MOVX    @DPTR,A
TIM_2412notzero:
	POP     DPH
	POP     DPL
	RET
;
;*************************************************************
	END     ;************ TIME.ASM *************






