	$word	32
	$byte	 8
	$quantum 8
	$awidth	32:64
	$plist	8

p	$proc
"$map"*	$name

p	$proc
word*	$name
parts	$set	p(1,1:)
"$data"	$set,$binary	p(1,1:parts)
part	$do	parts-1,	relocate	p(1, 1:part)
	$load,$bits	$data
	$end

p	$proc
relocate* $name


label1	$pushrel	p(1,1)

	$if	$t(label1)=$equf
v	$set	label1
bits	$set	from2(label1)
scale	$set	from3(label1)
offset	$set	from4(label1)
descant	$set	from5(label1)

limit	$set	1*/bits
mask	$set	limit-1
unmask	$set	^(mask*/scale)

        $if     (bits=24)**(($data**2)=0)**(descant=-2)
	$if	$rel
	$if	$a=0
	$flag	relative jump from relocatable to absolute
	$endif
	$endif

field   $set    $net(v+offset-$b)
        $info,$offset   field
"$data"* $set   ($data**0FC000003)++(field**03FFFFFC)

        $else


field	$set	$net(v+(($data/*scale)**mask))

	$do	descant<0,;
field	$set	(v+offset)/*(-descant)


field	$set	$net(field**mask)
"$data"* $set	(field*/scale)++($data**unmask)

	$endif
	$else

offset	$set	label1/*96
bits	$set	(label1/*32)**0FFFFFFFF
	$if	bits=24
        $if	($data**2)=0
update	$set	(offset-$b)**0FFFFFFFF
	$trace	update
	$info,$offset	update
"$data"* $set	($data**0FC000003)++(update**03FFFFFC)
	$endif
	$endif

	$endif
	$end

f	$func
arthur*	$func
	$note	arfur speaking
	$return	0
	$end
from2*	$name
	$return	f(1, 2)
from3*	$name
	$return	f(1, 3)
from4*	$name
	$return	f(1, 4)
from5*	$name
norbert* $func
	$note	ganz richtig, ich bin derNorbert
	$return	0
	$end
	$if	stan+norbert+arthur
	$endif
	$return	f(1, 5)
	$end
stan*	$func	*
	$notef	Hallo I'm yerStan on pass 1
	$note	Hallo I'm yerStan on pass 2
	$return	0
	$end
index	$do	p(),	word	p(index, 1)
	$end

